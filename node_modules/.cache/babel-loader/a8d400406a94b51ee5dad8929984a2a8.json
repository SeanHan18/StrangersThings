{"ast":null,"code":"import { toUnitless } from \"@mui/material/styles/cssUtils\";\nconst baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (ex) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer TOKEN_STRING_HERE'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('Login Error');\n  }\n};\nexport const grabData = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log(console.error);\n  }\n};\nexport const createPost = async (token, post) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: post.title,\n          description: post.description,\n          price: post.price,\n          willDeliver: post.willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log(console.error);\n  }\n};","map":{"version":3,"names":["toUnitless","baseURL","getPosts","token","response","fetch","headers","results","json","ex","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","grabData","error","createPost","post","title","description","price","willDeliver"],"sources":["/home/sean/Coding/course_work/Stranger's_Things/src/api/index.js"],"sourcesContent":["import { toUnitless } from \"@mui/material/styles/cssUtils\";\n\nconst baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async (token) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n    });\n    const results = await response.json()\n    return (results);\n    }\n  catch (ex) {\n    console.log('error getting all posts')\n  }\n}\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer TOKEN_STRING_HERE'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  }\n  catch (ex) {\n    console.log('error registering user')\n  }\n\n}\n\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  }\n  catch (ex) {\n    console.log('Login Error')\n  }\n}\n\nexport const grabData = async (token) => {\n  try{\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    })\n    const result = await response.json();\n    return result;\n  }\n  catch(ex){\n    console.log(console.error)\n  }\n}\n\nexport const createPost = async (token, post) => {\n  try{\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: post.title,\n          description: post.description,\n          price: post.price,\n          willDeliver: post.willDeliver\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  }\n  catch(ex){\n    console.log(console.error)\n  }\n}"],"mappings":"AAAA,SAASA,UAAT,QAA2B,+BAA3B;AAEA,MAAMC,OAAO,GAAG,+DAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,KAAP,IAAiB;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,QAAZ,EAAqB;MACjDK,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASH,KAAM;MAF1B;IADwC,CAArB,CAA5B;IAMA,MAAMI,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;IACA,OAAQD,OAAR;EACC,CATH,CAUA,OAAOE,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,yBAAZ;EACD;AACF,CAdM;AAgBP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EACxD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,iBAAZ,EAA8B;MACxDc,MAAM,EAAE,MADgD;MAExDT,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAiB;MAFV,CAF+C;MAMxDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBC,IAAI,EAAE;UACJN,QAAQ,EAAEA,QADN;UAEJC,QAAQ,EAAEA;QAFN;MADa,CAAf;IANkD,CAA9B,CAA5B;IAaA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IACA,OAAOY,MAAP;EACD,CAhBD,CAiBA,OAAOX,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACD;AAEF,CAtBM;AAwBP,OAAO,MAAMU,SAAS,GAAG,OAAOR,QAAP,EAAiBC,QAAjB,KAA8B;EACrD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,cAAZ,EAA2B;MACrDc,MAAM,EAAE,MAD6C;MAErDT,OAAO,EAAE;QACP,gBAAgB;MADT,CAF4C;MAKrDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBC,IAAI,EAAE;UACJN,QAAQ,EAAEA,QADN;UAEJC,QAAQ,EAAEA;QAFN;MADa,CAAf;IAL+C,CAA3B,CAA5B;IAYA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IACA,OAAOY,MAAP;EACD,CAfD,CAgBA,OAAOX,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,aAAZ;EACD;AACF,CApBM;AAsBP,OAAO,MAAMW,QAAQ,GAAG,MAAOnB,KAAP,IAAiB;EACvC,IAAG;IACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,WAAZ,EAAwB;MAClDK,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASH,KAAM;MAF1B;IADyC,CAAxB,CAA5B;IAMA,MAAMiB,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IACA,OAAOY,MAAP;EACD,CATD,CAUA,OAAMX,EAAN,EAAS;IACPC,OAAO,CAACC,GAAR,CAAYD,OAAO,CAACa,KAApB;EACD;AACF,CAdM;AAgBP,OAAO,MAAMC,UAAU,GAAG,OAAOrB,KAAP,EAAcsB,IAAd,KAAuB;EAC/C,IAAG;IACD,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,QAAZ,EAAqB;MAC/Cc,MAAM,EAAE,MADuC;MAE/CT,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASH,KAAM;MAF1B,CAFsC;MAM/Ca,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBO,IAAI,EAAE;UACJC,KAAK,EAAED,IAAI,CAACC,KADR;UAEJC,WAAW,EAAEF,IAAI,CAACE,WAFd;UAGJC,KAAK,EAAEH,IAAI,CAACG,KAHR;UAIJC,WAAW,EAAEJ,IAAI,CAACI;QAJd;MADa,CAAf;IANyC,CAArB,CAA5B;IAeA,MAAMT,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IACA,OAAOY,MAAP;EACD,CAlBD,CAmBA,OAAMX,EAAN,EAAS;IACPC,OAAO,CAACC,GAAR,CAAYD,OAAO,CAACa,KAApB;EACD;AACF,CAvBM"},"metadata":{},"sourceType":"module"}