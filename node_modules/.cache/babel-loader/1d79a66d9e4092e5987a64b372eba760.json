{"ast":null,"code":"var _jsxFileName = \"/home/sean/Coding/course_work/Stranger's_Things/src/components/EditPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { updatePost } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPost = _ref => {\n  _s();\n\n  let {\n    posts\n  } = _ref;\n  const {\n    postID\n  } = useParams();\n  const token = window.localStorage.getItem('token');\n  const [currentPost] = posts.filter(post => post._id === postID);\n  const {\n    title,\n    description,\n    location,\n    price,\n    willDeliver\n  } = currentPost;\n  const {\n    newTitle,\n    setNewTitle\n  } = useState(title);\n  const {\n    newDescription,\n    setNewDesc\n  } = useState(description);\n  const {\n    newLocation,\n    setNewLocation\n  } = useState(location);\n  const {\n    newPrice,\n    setNewPrice\n  } = useState(price);\n  const {\n    newWillDeliver,\n    setNewWillDeliver\n  } = useState(willDeliver);\n\n  async function editPost() {\n    const updatedPost = {\n      token: token,\n      title: newTitle,\n      description: newDescription,\n      location: newLocation,\n      price: newPrice,\n      willDeliver: newWillDeliver,\n      _id: postID\n    };\n    await updatePost(updatedPost);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      editPost();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      placeholder: title,\n      onChange: event => setNewTitle(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      placeholder: description,\n      onChange: event => setNewDesc(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      placeholder: location,\n      onChange: event => setNewLocation(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      placeholder: price,\n      onChange: event => setNewPrice(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      placeholder: newWillDeliver,\n      onChange: event => setNewWillDeliver(event.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPost, \"Zjlkm5GzwY6RMIbThJ5g0C9hNXU=\", false, function () {\n  return [useParams];\n});\n\n_c = EditPost;\nexport default EditPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useParams","updatePost","EditPost","posts","postID","token","window","localStorage","getItem","currentPost","filter","post","_id","title","description","location","price","willDeliver","newTitle","setNewTitle","newDescription","setNewDesc","newLocation","setNewLocation","newPrice","setNewPrice","newWillDeliver","setNewWillDeliver","editPost","updatedPost","event","preventDefault","target","value","checked"],"sources":["/home/sean/Coding/course_work/Stranger's_Things/src/components/EditPosts.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { updatePost } from \"../api\";\n\nconst EditPost = ({ posts }) => {\n\n    const { postID } = useParams();\n    const token = window.localStorage.getItem('token')\n\n    const [currentPost] = posts.filter(post => post._id === postID)\n    const { title, description, location, price, willDeliver } = currentPost;\n\n    const { newTitle, setNewTitle } = useState(title);\n    const { newDescription, setNewDesc } = useState(description);\n    const { newLocation, setNewLocation } = useState(location);\n    const { newPrice, setNewPrice } = useState(price);\n    const { newWillDeliver, setNewWillDeliver } = useState(willDeliver);\n\n    async function editPost() {\n        const updatedPost = {\n            token : token,\n            title: newTitle,\n            description: newDescription,\n            location: newLocation,\n            price: newPrice,\n            willDeliver: newWillDeliver,\n            _id: postID\n        }\n        await updatePost(updatedPost)\n    }\n\n    return (\n        <form onSubmit={(event) => { event.preventDefault(); editPost(); }}>\n            <input\n                type='test'\n                placeholder={title}\n                onChange={(event) => setNewTitle(event.target.value)}\n            />\n            <input\n                type='test'\n                placeholder={description}\n                onChange={(event) => setNewDesc(event.target.value)}\n            />\n            <input\n                type='test'\n                placeholder={location}\n                onChange={(event) => setNewLocation(event.target.value)}\n            />\n            <input\n                type='test'\n                placeholder={price}\n                onChange={(event) => setNewPrice(event.target.value)}\n            />\n            <input\n                type='checkbox'\n                placeholder={newWillDeliver}\n                onChange={(event) => setNewWillDeliver(event.target.checked)}\n            />\n            <button type='submit'>Edit Post</button>\n        </form>\n    )\n}\n\nexport default EditPost"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,QAA3B;;;AAEA,MAAMC,QAAQ,GAAG,QAAe;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAE5B,MAAM;IAAEC;EAAF,IAAaJ,SAAS,EAA5B;EACA,MAAMK,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd;EAEA,MAAM,CAACC,WAAD,IAAgBN,KAAK,CAACO,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,MAAlC,CAAtB;EACA,MAAM;IAAES,KAAF;IAASC,WAAT;IAAsBC,QAAtB;IAAgCC,KAAhC;IAAuCC;EAAvC,IAAuDR,WAA7D;EAEA,MAAM;IAAES,QAAF;IAAYC;EAAZ,IAA4BpB,QAAQ,CAACc,KAAD,CAA1C;EACA,MAAM;IAAEO,cAAF;IAAkBC;EAAlB,IAAiCtB,QAAQ,CAACe,WAAD,CAA/C;EACA,MAAM;IAAEQ,WAAF;IAAeC;EAAf,IAAkCxB,QAAQ,CAACgB,QAAD,CAAhD;EACA,MAAM;IAAES,QAAF;IAAYC;EAAZ,IAA4B1B,QAAQ,CAACiB,KAAD,CAA1C;EACA,MAAM;IAAEU,cAAF;IAAkBC;EAAlB,IAAwC5B,QAAQ,CAACkB,WAAD,CAAtD;;EAEA,eAAeW,QAAf,GAA0B;IACtB,MAAMC,WAAW,GAAG;MAChBxB,KAAK,EAAGA,KADQ;MAEhBQ,KAAK,EAAEK,QAFS;MAGhBJ,WAAW,EAAEM,cAHG;MAIhBL,QAAQ,EAAEO,WAJM;MAKhBN,KAAK,EAAEQ,QALS;MAMhBP,WAAW,EAAES,cANG;MAOhBd,GAAG,EAAER;IAPW,CAApB;IASA,MAAMH,UAAU,CAAC4B,WAAD,CAAhB;EACH;;EAED,oBACI;IAAM,QAAQ,EAAGC,KAAD,IAAW;MAAEA,KAAK,CAACC,cAAN;MAAwBH,QAAQ;IAAK,CAAlE;IAAA,wBACI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAEf,KAFjB;MAGI,QAAQ,EAAGiB,KAAD,IAAWX,WAAW,CAACW,KAAK,CAACE,MAAN,CAAaC,KAAd;IAHpC;MAAA;MAAA;MAAA;IAAA,QADJ,eAMI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAEnB,WAFjB;MAGI,QAAQ,EAAGgB,KAAD,IAAWT,UAAU,CAACS,KAAK,CAACE,MAAN,CAAaC,KAAd;IAHnC;MAAA;MAAA;MAAA;IAAA,QANJ,eAWI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAElB,QAFjB;MAGI,QAAQ,EAAGe,KAAD,IAAWP,cAAc,CAACO,KAAK,CAACE,MAAN,CAAaC,KAAd;IAHvC;MAAA;MAAA;MAAA;IAAA,QAXJ,eAgBI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAEjB,KAFjB;MAGI,QAAQ,EAAGc,KAAD,IAAWL,WAAW,CAACK,KAAK,CAACE,MAAN,CAAaC,KAAd;IAHpC;MAAA;MAAA;MAAA;IAAA,QAhBJ,eAqBI;MACI,IAAI,EAAC,UADT;MAEI,WAAW,EAAEP,cAFjB;MAGI,QAAQ,EAAGI,KAAD,IAAWH,iBAAiB,CAACG,KAAK,CAACE,MAAN,CAAaE,OAAd;IAH1C;MAAA;MAAA;MAAA;IAAA,QArBJ,eA0BI;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA1BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA8BH,CAzDD;;GAAMhC,Q;UAEiBF,S;;;KAFjBE,Q;AA2DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}